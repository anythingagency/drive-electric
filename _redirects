<script>
  ! function(n, e, o, r, i) {
    if (!e) {
      e = e || {}, window.permutive = e, e.q = [], e.config = i || {}, e.config.projectId = o, e.config.apiKey = r, e.config.environment = e.config.environment || "production";
      for (var t = ["addon", "identify", "track", "trigger", "query", "segment", "segments", "ready", "on", "once", "user", "consent"], c = 0; c < t.length; c++) {
        var f = t[c];
        e[f] = function(n) {
          return function() {
            var o = Array.prototype.slice.call(arguments, 0);
            e.q.push({
              functionName: n,
              arguments: o
            })
          }
        }(f)
      }
    }
  }(document, window.permutive, "{{LT - Permutive WORKSPACE_ID}}", "{{LT - Permutive WORKSPACE_API_KEY}}", {"apiHost": "permutive.{{LT - Permutive - Cname}}", cookieExpiry : {{CJS - UTC string date}} });

  window.googletag = window.googletag || {}, window.googletag.cmd = window.googletag.cmd || [], window.googletag.cmd.push(function() {
    if (0 === window.googletag.pubads().getTargeting("permutive").length) {
      var g = window.localStorage.getItem("_pdfps");
      window.googletag.pubads().setTargeting("permutive", g ? JSON.parse(g) : [])
    }
  });
</script>
<script id="dmp_init">
  (function dmpInit() {
    var debugEnabled = true;
    var timerLoadPermutiveAsync = setTimeout(loadPermutiveAsync, 5000);
    var localStorageKey = "unify-anonymous-id";
    var identities = [];

    function loadPermutiveAsync(){
      // First, call identify() because it's the mandatory
      if(identities.length > 0){
        debugEnabled && console.log("DMP - All identities pushed: %o", identities);
        window.permutive.identify(identities);
      }
      else {
        debugEnabled && console.log("DMP - No identity found");
      }
      // Then add custom properties
      addCustomPropertiesToPermutive()
      // Finally load the script
      debugEnabled && console.log("Adding tag to load Permutive");
      var permutive_async = document.createElement("script");
      permutive_async.type = "text/javascript";
      permutive_async.async = true;
      permutive_async.src = "https://cdn.permutive.com/{{LT - Permutive WORKSPACE_ID}}-web.js";
      document.getElementById("dmp_init").parentNode.appendChild(permutive_async);
    }

    function doesBrowserRequiresAnonymousIdentifier(){
      var isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 &&
              navigator.userAgent &&
              navigator.userAgent.indexOf('CriOS') == -1 &&
              navigator.userAgent.indexOf('FxiOS') == -1;
      if(isSafari){
        debugEnabled && console.log("doesBrowserRequiresAnonymousIdentifier: true");
        return true;
      }
      debugEnabled && console.log("doesBrowserRequiresAnonymousIdentifier: false");
      return false;
    }

    /**
    * @param {string} currentDomain Current subdomain for the site.
    * @param  {Function} callback Called with two parameters:
    *         - the identifier if found, null otherwise
    *         - the creation datetime of the identifier if found.
    */
    function loadAnonymousIdentifier(currentDomain, callback){
      var finalDomain = currentDomain; // @TODO: fixme!
      if(anonymous_id = window.localStorage.getItem(localStorageKey)){
        debugEnabled && console.log("Information récupérée depuis le local storage : "+anonymous_id);
        return callback(anonymous_id);
      }

      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function(){
        if (xhr.readyState !== 4)
          return;
        try {
          var res = JSON.parse(xhr.responseText);
          debugEnabled && console.info("Permutive anonymous id : Retour du JSON : %o", res);
          var anonymous_id = res.anonymous_id;
          var cookie_creation_date = res.creation_date;
          var ws_last_call_date = res.current_date;
          // Save the results into the local storage
          window.localStorage.setItem(localStorageKey, anonymous_id);
          window.localStorage.setItem(localStorageKey+"-creation_date", cookie_creation_date);
          window.localStorage.setItem(localStorageKey+"-ws_call_date", ws_last_call_date);
          return callback(anonymous_id, cookie_creation_date);
        }
        catch(e){
          contenu = "Une erreur est survenue...";
          debugEnabled && console.error("Permutive anonymous id : Retour erreur : %o", e);
          return callback(null)
        }
      };

      xhr.open('GET', 'https://'+finalDomain+'/anonymous-id-generator.php?v=1', true);
      xhr.withCredentials = true;
      xhr.timeout = 1500; // time in milliseconds
      xhr.send();
    }

    /**
     * Get from the parameter or local storage full creation datetime,
     * returns the date.
     * @param  {string} realValue       Ex: "20201126_145959"
     * @return {string}                 The date. Ex: "20201126"
     */
    function getAnonymousIdentifierCreationDate(realValue){
      if(!realValue){
        realValue = window.localStorage.getItem(localStorageKey+"-creation_date");
      }
      if(!realValue){
        // Current date
        realValue = (new Date()).toISOString().replace(/^(\d{4})-(\d\d)-(\d\d).*/,'$1$2$3_')
      }
      return realValue.split('_')[0];
    }

    function saveAnonymousIdIntoPermutive(anonymous_id, identifier_creation_datetime){
      if(anonymous_id){
        identities.push({
          "id": anonymous_id,
          "tag": "anonymousId"
        });
      }
      // Load permutive NOW
      clearTimeout(timerLoadPermutiveAsync);
      loadPermutiveAsync();

      if(anonymous_id){
        identifier_creation_date = getAnonymousIdentifierCreationDate(identifier_creation_datetime);
        /*
        // By the way, load stats into the DataLayer
        window.unify_dataSlayer = window.unify_dataSlayer || [];
        window.unify_dataSlayer.push({
          event: "uaevent",
          eventCategory: "Permutive",
          eventAction: anonymous_id,
          eventLabel: identifier_creation_date
        });
        */
      }
    }

    /****************************************
     *************   MAIN CODE  *************
     ****************************************/
    if(doesBrowserRequiresAnonymousIdentifier()){
      var currentDomain = document.domain ? 'www.'+document.domain : window.location.hostname;
      loadAnonymousIdentifier(currentDomain, saveAnonymousIdIntoPermutive)
    }
    else {
      // Load permutive NOW!
      clearTimeout(timerLoadPermutiveAsync);
      loadPermutiveAsync();
    }

    /****************************************************************
     ******** FONCTION A MODIFIER PAR L'EQUIPE DATA *****************
     ****************************************************************/
    function addCustomPropertiesToPermutive(){

      // Override U2ID for special OPS
      var p_id = window.hasOwnProperty("URLSearchParams") ? ((new URLSearchParams(window.location.hash.substring(1))).get('p_id_override') || "").replace(/[^a-z0-9-]*/g,'') : "";
      var permutive_user_id = p_id || {{DL - CD 20 - User ID}};
      var permutive_user_hashed_email = {{DL - User hashed Email}};
      var permutiveIdentities = [];

      if(permutive_user_id !== ''){
        permutiveIdentities.push({
          "id": permutive_user_id,
          "tag": "publisherId",
          "priority": 0
        });
      }

      if(permutive_user_hashed_email !== ''){
        permutiveIdentities.push({
          "id": permutive_user_id,
          "tag": "userhashedemail",
          "priority": 1
        });
      }

      if (permutiveIdentities.length) {
        permutive.identify(permutiveIdentities);
        console.log('send identify');
        console.log(permutiveIdentities);
      }

      permutive.addon('web', {
        page: {
          type: {{DL - CD 4 - Content Type}}, 
          article: {
            title: {{Page Title}},
            section: {{DL - CD 6 - Page Section}},
            tags: (typeof {{DL - CD 8 - Page Main Tag}} == 'object' ? {{DL - CD 8 - Page Main Tag}}.split(",") : []),
            category: {{DL - CD 7 - Page Sub Section}},
            gsChannels: (typeof {{DL - Page Grapeshot}} == 'object' ? {{DL - Page Grapeshot}} : [])
          }
        }
      });

    } // /!\ Fin de la fonction à modifier par l'équipe Data

  })(); // fin dmpInit
</script>